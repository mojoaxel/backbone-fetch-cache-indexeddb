/**
 * @see https://github.com/mojoaxel/backbone-fetch-cache-indexeddb
 * @copyright 2017 by Alexander Wunschik <mail@wunschik.it>
 * @license MIT
 */
!function(root,factory){"function"==typeof define&&define.amd?define(["underscore","backbone","jquery"],function(_,Backbone,$){return root.Backbone=factory(_,Backbone,$)}):"undefined"!=typeof exports&&"undefined"!=typeof require?module.exports=factory(require("underscore"),require("backbone"),require("jquery")):root.Backbone=factory(root._,root.Backbone,root.jQuery)}(this,function(_,Backbone,$){Backbone.fetchCache=Backbone.memCache||{enabled:!0},Backbone.fetchCache.memCache=Backbone.fetchCache.memCache||{};var superMethods={modelFetch:Backbone.Model.prototype.fetch,modelSync:Backbone.Model.prototype.sync,collectionFetch:Backbone.Collection.prototype.fetch},urlError=function(){throw new Error('A "url" property or function must be specified')},wrapError=function(model,options){var error=options.error;options.error=function(resp){error&&error.call(options.context,model,resp,options),model.trigger("error",model,resp,options)}};return Backbone.fetchCache.reset=function(callback){delete Backbone.fetchCache.memCache,Backbone.fetchCache.memCache={},callback&&callback()},Backbone.Model.prototype.fetch=function(options){if(!(Backbone.fetchCache.enabled||options&&options.cache))return superMethods.modelFetch.apply(this,arguments);options=_.extend({parse:!0},options);var model=this,deferred=new $.Deferred,context=options.context||this,url=_.result(model,"url")||urlError(),key=encodeURIComponent(url);if(!Backbone.fetchCache.memCache[key]){var success=options.success;return options.success=function(resp){var serverAttrs=options.parse?model.parse(resp,options):resp;return!!model.set(serverAttrs,options)&&(Backbone.fetchCache.memCache[key]=resp,success&&success.call(options.context,model,resp,options),void model.trigger("sync",model,resp,options))},wrapError(this,options),this.sync("read",this,options)}var cacheData=Backbone.fetchCache.memCache[key],serverAttrs=options.parse?model.parse(cacheData,options):cacheData;if(!model.set(serverAttrs,options))return!1;var success=options.success;success&&success.call(context,model,cacheData,options),model.trigger("sync",model,cacheData,options),deferred.resolveWith(context,[model])},Backbone});